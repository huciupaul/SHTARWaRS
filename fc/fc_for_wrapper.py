from CoolProp.CoolProp import PropsSI
import numpy as np
# import fuel_cell_info
# import flight_condition
# import hydrogen_storage
import pickle

import sys
import os

current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.join(current_dir, '..')
sys.path.insert(0, os.path.abspath(parent_dir))

import global_constants as gc


'''
A class which contains the fuel cell characteristics and calculates the power output based on the flight conditions and hydrogen storage.
'''

class FuelCell:

    # Load efficiency function from file
    with open('fc/spline_eta_of_P.pkl', 'rb') as f:
        efficiency_per_throttle = pickle.load(f)


    @staticmethod
    def water_air_separator(m_air_FC_out, m_H20_FC):
        """
        Calculates volume of the water-air separator based on the mass flow rates of air and water.
        """
        
        pass

    
    def __init__(self, name, power_req_max, throttle_TOGA = 0.85):
        """
        Initialize the FuelCell class with the maximum power required and throttle setting.
        Args:
            power_req_max (float): Maximum power required by the fuel cell in watts.
            TOGA_throttle (float): Throttle setting for Take-Off/Go-Around, default is 0.85 (for initial FPP run).
        """
        self.name = name
        self.throttle_TOGA = throttle_TOGA  # [0-1] Throttle setting for Take-Off/Go-Around
        self.power_max_throttle = power_req_max / throttle_TOGA # [W] Maximum power output of the fuel cell at full throttle setting
        self.power_req_max = power_req_max  # [W] Maximum power required by the fuel cell
        self.power_min = self.power_max_throttle * 0.09 # NOTE: 9% of max, taken from literature
        self.fc_mass = self.power_max_throttle / gc.mass_specific_power  # [kg] Mass of the fuel cell stack
        self.fc_volume = self.power_max_throttle / gc.volume_specific_power
        self.fc_gwp = self.power_max_throttle * gc.FC_prod_gwp / 1000  # [kg CO2] GWP of the fuel cell production
        self.power_max_throttle * gc.FC_cost / 1000
    
    
    @staticmethod
    def get_fc_efficiency(Throttle = None):
        """
        Efficiency function from other file
        """
        if Throttle is None:
            return 0.5  # Placeholder for actual efficiency calculation
        
        return gc.efficiency_per_throttle(Throttle)  # Get the efficiency based on the throttle setting
     
    def get_fc_cost(self, P_req_max):
        """
        Calculate the cost of the fuel cell based on the maximum power required.
        Args:
            P_req_max (float): Maximum power required by the fuel cell in watts.
        Returns:
            float: Cost of the fuel cell in Euros for entire lifetime.
        """
        prod_cost = self.power_max_throttle /1000 * gc.FC_cost_no_bop * 2
        bop_cost = P_req_max / 1000 * (gc.FC_cost - gc.FC_cost_no_bop)  # Balance of Plant cost
        maint_cost = gc.FC_maint_cost * P_req_max / 1000  # Maintenance cost
        disposal_cost = self.fc_mass * gc.FC_disposal_cost  # Disposal cost of the

        self.fc_cost = self.power_max_throttle /1000 * gc.FC_cost_no_bop * 2 + P_req_max / 1000 * (gc.FC_cost - gc.FC_cost_no_bop) + self.fc_mass * gc.FC_disposal_cost + gc.FC_maint_cost * P_req_max /1000

        return [self.fc_cost, prod_cost, bop_cost, maint_cost, disposal_cost]  # [â‚¬] Cost of the fuel cell for the entire lifetime


    def get_TMS_spec(self):
        """
        Get the specific mass flow rate of hydrogen for the fuel cell.
        Returns:
            float: Specific mass flow rate of hydrogen in kg/s.
        """
        efficiency = FuelCell.get_fc_efficiency()  # Get the efficiency based on the throttle setting
        m_H2_sp = 1 / (gc.LHV_H2 * efficiency)  # [kg/s/W] Specific mass flow rate of hydrogen for the fuel cell
        m_air_in_sp = m_H2_sp / gc.stoic_ratio_A * gc.stoic_ratio_C * 15.999 / 2.01568 / 0.2314  # [kg/s/W] Specific mass flow rate of air for the fuel cell
        m_air_out_sp = m_air_in_sp + m_H2_sp  # [kg/s/W] Specific mass flow rate of air out of the fuel cell
        m_H20_sp = m_H2_sp * 18.01528 / 2.01568  # [kg/s/W] Specific mass flow rate of water produced by the fuel cell
        Qdot_FC_sp = (1 - efficiency) / efficiency   # [W/W] Heat generated by the fuel cell per watt of power output
        m_H2_recirculation_sp = self.m_H2_sp * (gc.stoic_ratio_A - 1)



        return Qdot_FC_sp, m_H2_sp, m_air_in_sp, m_air_out_sp, m_H20_sp, m_H2_recirculation_sp

    def get_TMS_values(self, power=None):
        """
        Get the thermal management system (TMS) values for the fuel cell.
        Returns:
            tuple: Contains the heat generation rate (Q_dot_FC) and the mass flows in/out of the fuel cell.
        """

        if power is None:
            power = self.power_req_max
            efficiency = FuelCell.get_fc_efficiency()
        else:
            efficiency = FuelCell.get_fc_efficiency(power / self.power_max_throttle)
            # print(f"Efficiency at {power} W: {efficiency * 100:.2f}%")

        # Calculate the heat generated by the fuel cell
        self.Qdot_FC = power * (1 - efficiency) / efficiency  # [W] Heat generated by the fuel cell

        # Calculate the mass flow rate of hydrogen required for the fuel cell
        self.m_H2_FC = power / (gc.LHV_H2 * efficiency)  # [kg/s] Mass flow rate of hydrogen in the fuel cell
        
        # Calculate the mass flow rate of air required for the fuel cell
        self.m_air_FC_in = self.m_H2_FC * gc.stoic_ratio_C * 15.999 / 2.01568 / 0.2314

        # Calculate the mass flow rate of fluid out of the fuel cell
        self.m_air_FC_out = self.m_air_FC_in + self.m_H2_FC

        # Calculate the mass flow rate of water produced by the fuel cell
        self.m_H20_FC = self.m_H2_FC * 18.01528 / 2.01568  # [kg/s] Mass flow rate of water produced by the fuel cell
        # Calculate the mass flow rate of water recuperated from the fuel cell
        self.m_H20_FC_CC = self.m_H20_FC * 0.85  # Assuming 85% of water is recuperated


        # Calculate the recirculation mass flow rate of hydrogen
        self.m_H2_recirculation = self.m_H2_FC * (gc.stoic_ratio_A - 1)

        return self.Qdot_FC, self.m_H2_FC, self.m_air_FC_in, self.m_air_FC_out, self.m_H20_FC, self.m_H2_recirculation, self.m_H20_FC_CC
    



if __name__ == "__main__":
    idle_throttle = 0.09
    # cruise = 
    fuel_cell = FuelCell(name="HTPEM", power_req_max=1908000*0.35, throttle_TOGA=0.275)
    print(f"Fuel Cell Name: {fuel_cell.name}")
    print(f"Fuel Cell Mass: {fuel_cell.fc_mass:.2f} kg")
    print(f"Fuel Cell Volume: {fuel_cell.fc_volume:.2f} m^3")
    Qdot_FC, m_H2_FC, m_air_FC_in, m_air_FC_out, m_H20_FC, m_H2_recirculation, m_H2_recirculation_CC = fuel_cell.get_TMS_values(power=1908000*0.35*0.325/0.275)

    print(f"proportion of flow rate of H2 in the fuel cell: {m_H2_FC:.4f} [%]")
    print(f"proportion of flow rate of O2 in the fuel cell: {m_air_FC_in*0.2314/m_air_FC_out:.4f} [%]")
    
    print(f"proportion of flow rate of O2 out of the fuel cell: {m_air_FC_in*0.2314*0.6/1.6/m_air_FC_out:.4f} [%]")
    print(f"proportion of flow rate of air in the fuel cell: {m_air_FC_in/m_air_FC_out:.4f} [%]")
    print(f"proportion of flow rate of water in the fuel cell: {m_H20_FC * 0.85} [%]")
    print(f"proportion of flow rate of H2 recirc in the fuel cell: {m_H2_recirculation/m_air_FC_out:.4f} [%]")

    print(fuel_cell.get_fc_cost(1908000*0.35*0.325/0.275))



    # print(fuel_cell.fc_cost())

